var path = require('path'),
    _ = require('lodash'),
    util = require('util'),
    exec = require('child_process').exec,
    fs = require('fs'),
    protractorBinaries = path.join(require.resolve('protractor'), '..', '..', 'bin');

function angularProtractorTask(task, grunt) {
    this.grunt = grunt;
    grunt.verbose.writeln('Task angularProtractorTask. ');
    this.origTask = task;
    this.async = task.async;
    this.protractorBinaries = task.data.protractorBinaries || protractorBinaries;
    this.configFile = task.data.configFile || false;
    this.debug = task.data.debug || false;
    this.dest = task.data.dest || false;
    this.nodeBin = task.data.nodeBin || 'node';
    this.keepAlive = task.data.keepAlive || false;
    this.noColor = task.data.noColor || false;
    this.webdriverManagerUpdate = task.data.webdriverManagerUpdate || false;
    this.protractorOptions = this.getProtractorOptions(task);
    this.generateConfigFile();
}

angularProtractorTask.prototype = {

    getProtractorOptions: function (task) {
        return require(path.join(__dirname, 'prototype', 'getProtractorOptions'))(this, task);
    },

    generateConfigFile: function () {
        require(path.join(__dirname, 'prototype', 'generateConfigFile'))(this);
    },

    addArguments: function () {
        return require(path.join(__dirname, 'prototype', 'addArguments'))(this);
    },

    run: function () {
        require(path.join(__dirname, 'prototype', 'run'))(this);
    }

};

angularProtractorTask.registerWithGrunt = function (grunt) {

    grunt.registerMultiTask(
        'angular_protractor',
        'Run protractor with grunt task runner.', function () {
            var task = new angularProtractorTask(this, grunt);
            task.run();
        });

};

module.exports = angularProtractorTask;
