'use strict';

var grunt = require('grunt'),
    should = require('should'),
    path = require('path'),
    _ = require('lodash');

var AngularProtractorTask = require('../lib/angularProtractorTask');

describe('AngularProtractorTask', function () {

    var makeMockTask = function (done) {
        return {
            data: {
                dest: path.join('build', 'test0-config.js'),
                options: {}
            },
            options: function (defs) {
                return _.defaults(this.data, defs);
            },
            async: function () {
                return done;
            }
        };
    };

    it('grunt should exists.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.grunt);
    });

    it('origTask should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.origTask);
    });

    it('protractorBinaries should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.protractorBinaries);
    });

    it('configFile should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.configFile);
    });

    it('debug should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.debug);
    });

    it('dest should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.dest);
    });

    it('nodeBin should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.nodeBin);
    });

    it('keepAlive should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.keepAlive);
    });

    it('webdriverManagerUpdate should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.webdriverManagerUpdate);
    });

    it('protractorOptions should exits.', function () {
        var task = new AngularProtractorTask(makeMockTask(), grunt);
        should.exist(task.protractorOptions);
    });


    var makeMockTask1 = function (done) {
        return {
            data: {
                configFile: path.join(__dirname, 'conf', 'configFile.js'),
                dest: path.join('build', 'test1-config.js'),
                rootElement: 'div.false',
                options: {}
            },
            options: function (defs) {
                return _.defaults(this.data, defs);
            },
            async: function () {
                return done;
            }
        };
    };


    it('should extend default options with options form the config file and then override extend dem from the task.', function () {
        var task = new AngularProtractorTask(makeMockTask1(), grunt),
            getOptions = task.protractorOptions;

        should.exist(getOptions);
        getOptions.rootElement.should.equal('div.false');
    });


    var makeMockTask3 = function (done) {
        return {
            data: {
                configFile: path.join(__dirname, 'conf', 'configFile.js'),
                dest: path.join(__dirname, '..', 'build', 'test2-config.js'),
                options: {}
            },
            options: function (defs) {
                return _.defaults(
                    this.data, defs);
            },
            async: function () {
                return done;
            }
        };
    };

    it('should extend default options with options form the config file.', function () {
        var task = new AngularProtractorTask(makeMockTask3(), grunt),
            getOptions = task.protractorOptions;

        should.exist(getOptions);
        getOptions.rootElement.should.equal('body');
    });


    var makeMockTask4 = function (done) {
        return {
            data: {
                configFile: path.join(__dirname, '..', 'node_modules', 'protractor', 'example', 'conf.js'),
                dest: path.join(__dirname, '..', 'build', 'test3-config.js'),
                options: {}
            },
            options: function (defs) {
                return _.defaults(
                    this.data, defs);
            },
            async: function () {
                return done;
            }
        };
    };

    it('should extend default options with options form the config file.', function () {
        var task = new AngularProtractorTask(makeMockTask4(), grunt);
        task.dest.should.equal(path.join(__dirname, '..', 'build', 'test3-config.js'));
    });

});
