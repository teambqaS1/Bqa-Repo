'use strict';

var grunt = require('grunt'),
    should = require('should'),
    path = require('path'),
    _ = require('lodash');

var addArguments = require(path.join('..', '..', 'lib', 'prototype', 'addArguments'));

describe('AngularProtractorTask prototype add arguments', function () {

    var makeMock = function (done) {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    }
                },
                protractorBinaries: 'path',
                dest: 'dest',
                async: function () {
                    return done;
                }
            };
        },
        makeMock2 = function (done) {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    }
                },
                protractorBinaries: 'path',
                dest: 'dest',
                noColor: true,
                async: function () {
                    return done;
                }
            };
        },
        makeMock3 = function (done) {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    }
                },
                protractorBinaries: 'path',
                dest: 'dest',
                debug: true,
                async: function () {
                    return done;
                }
            };
        },
        makeMock4 = function (done) {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    }
                },
                protractorBinaries: 'path',
                dest: 'dest',
                noColor: true,
                debug: true,
                async: function () {
                    return done;
                }
            };
        };


    it('should return path to protractor and dest in an array.', function () {
        var returnValue = addArguments(makeMock());
        returnValue.should.deepEqual(['path/protractor', 'dest'])
    });

    it('should return attribute for no color information.', function () {
        var returnValue = addArguments(makeMock2());
        returnValue.should.deepEqual(['path/protractor', 'dest', '--no-jasmineNodeOpts.showColors'])
    });

    it('should return attribute for debugging.', function () {
        var returnValue = addArguments(makeMock3());
        returnValue.should.deepEqual(['path/protractor', 'debug', 'dest'])
    });

    it('should return attribute for debugging and for no color information.', function () {
        var returnValue = addArguments(makeMock4());
        returnValue.should.deepEqual(['path/protractor', 'debug', 'dest', '--no-jasmineNodeOpts.showColors'])
    });

});
