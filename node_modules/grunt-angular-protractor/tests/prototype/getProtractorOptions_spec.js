'use strict';

var grunt = require('grunt'),
    should = require('should'),
    path = require('path'),
    _ = require('lodash'),
    sinon = require('sinon');

var getProtractorOptions = require(path.join('..', '..', 'lib', 'prototype', 'getProtractorOptions'));

describe('AngularProtractorTask prototype get protractor options', function () {

    var makeMock_this_onlyGruntConfig = function () {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    },
                    warn: function () {

                    }
                }
            };
        }, makeMock_task_onlyGruntConfig = function () {
            return {
                data: {
                    options: {
                        test: 'case'
                    }
                },
                options: function (data) {
                    return data;
                }
            };
        },
        makeMock_this_onlyFileConfig = function () {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    },
                    warn: function () {

                    }
                },
                configFile: path.join(__dirname, '..', 'conf', 'configFile')
            };
        },
        makeMock_task_onlyFileConfig = function () {
            return {
                data: {
                    options: {}
                },
                options: function (data) {
                    return data;
                }
            };
        },
        makeMock_this_merge_FileConfig_with_gruntConfig = function () {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    },
                    warn: function () {

                    }
                },
                configFile: path.join(__dirname, '..', 'conf', 'configFile')
            };
        }, makeMock_task_merge_FileConfig_with_gruntConfig = function () {
            return {
                data: {
                    options: {
                        seleniumServerJar: 'path/to/jar.jar'
                    }
                },
                options: function (data) {
                    return data;
                }
            };
        }, makeMock_this_noConfig = function () {
            return {
                grunt: {
                    verbose: {
                        writeln: function () {
                        }
                    },
                    warn: sinon.spy()
                }
            };
        }, makeMock_task_noConfig = function () {
            return {
                data: {},
                options: function (data) {
                    return data;
                }
            };
        };

    it('should return only options from grunt', function () {
        var returnValue = getProtractorOptions(makeMock_this_onlyGruntConfig(), makeMock_task_onlyGruntConfig());
        returnValue.should.deepEqual({test: 'case'})
    });

    it('should return only options from config file', function () {
        var returnValue = getProtractorOptions(makeMock_this_onlyFileConfig(), makeMock_task_onlyFileConfig());
        should(returnValue.seleniumServerJar).be.null;
        should(returnValue.seleniumPort).be.null;
        should.exist(returnValue.seleniumArgs);
        should.exist(returnValue.chromeDriver);
        should(returnValue.seleniumAddress).be.null;
        should(returnValue.sauceUser).be.null;
        should(returnValue.sauceKey).be.null;
        should(returnValue.sauceAgent).be.null;
        should(returnValue.sauceSeleniumAddress).be.null;
        should.exist(returnValue.directConnect);
        should(returnValue.firefoxPath).be.null;
        should.exist(returnValue.specs);
        should.exist(returnValue.exclude);
        should.exist(returnValue.suites);
        should.exist(returnValue.suites.smoke);
        should.exist(returnValue.suites.full);
        should.exist(returnValue.capabilities);
        should.exist(returnValue.capabilities.browserName);
        should.exist(returnValue.capabilities.name);
        should.exist(returnValue.capabilities.logName);
        should.exist(returnValue.capabilities.count);
        should.exist(returnValue.capabilities.shardTestFiles);
        should.exist(returnValue.capabilities.maxInstances);
        should.exist(returnValue.capabilities.specs);
        should.exist(returnValue.capabilities.exclude);
        should(returnValue.capabilities.seleniumAddress).be.null;
        should.exist(returnValue.multiCapabilities);
        should(returnValue.getMultiCapabilities).be.null;
        should.exist(returnValue.maxSessions);
        should.exist(returnValue.baseUrl);
        should.exist(returnValue.rootElement);
        should.exist(returnValue.allScriptsTimeout);
        should.exist(returnValue.getPageTimeout);
        should.exist(returnValue.beforeLaunch);
        should.exist(returnValue.onPrepare);
        should.exist(returnValue.onComplete);
        should.exist(returnValue.onCleanUp);
        should.exist(returnValue.afterLaunch);
        should.exist(returnValue.params);
        should.exist(returnValue.params.login);
        should(returnValue.resultJsonOutputFile).be.null;
        should.exist(returnValue.restartBrowserBetweenTests);
        should.exist(returnValue.framework);
        should.exist(returnValue.jasmineNodeOpts);
        should.exist(returnValue.jasmineNodeOpts.showColors);
        should.exist(returnValue.jasmineNodeOpts.defaultTimeoutInterval);
        should.exist(returnValue.jasmineNodeOpts.print);
        should.exist(returnValue.jasmineNodeOpts.grep);
        should.exist(returnValue.jasmineNodeOpts.invertGrep);
        should.exist(returnValue.mochaOpts);
        should.exist(returnValue.mochaOpts.ui);
        should.exist(returnValue.mochaOpts.reporter);
        should.exist(returnValue.cucumberOpts);
        should.exist(returnValue.cucumberOpts.require);
        should.exist(returnValue.cucumberOpts.tags);
        should.exist(returnValue.cucumberOpts.format);
    });

    it('should return merge config file with grunt config options. Notice grunt options override file config!', function () {
        var returnValue = getProtractorOptions(makeMock_this_merge_FileConfig_with_gruntConfig(), makeMock_task_merge_FileConfig_with_gruntConfig());
        returnValue.seleniumServerJar.should.equal('path/to/jar.jar');
    });

    it('no grunt config logs a warning message.', function () {
        var this_noConfig = makeMock_this_noConfig()
        getProtractorOptions(this_noConfig, makeMock_task_noConfig());
        this_noConfig.grunt.warn.callCount.should.equal(1);
        getProtractorOptions(this_noConfig, makeMock_task_noConfig());
        this_noConfig.grunt.warn.callCount.should.equal(2);
    });


});
